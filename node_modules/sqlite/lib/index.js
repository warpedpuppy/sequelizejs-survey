'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sqlite = require('sqlite3');

var _sqlite2 = _interopRequireDefault(_sqlite);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let db; /**
         * SQLite client library for Node.js applications
         *
         * Copyright Â© 2016 Kriasoft, LLC. All rights reserved.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.txt file in the root directory of this source tree.
         */

let Promise = global.Promise;

function open(filename) {
  let options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  if (options.Promise) {
    Promise = options.Promise;
  }

  if (options.verbose) {
    _sqlite2.default.verbose();
  }

  return new Promise((resolve, reject) => {
    db = new _sqlite2.default.Database(filename, err => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

function close() {
  return new Promise((resolve, reject) => {
    db.close(err => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

function run(sql) {
  for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }

  return new Promise((resolve, reject) => {
    db.run(sql, params || [], function cb(err) {
      if (err) {
        reject(err);
      } else {
        resolve(this);
      }
    });
  });
}

function get(sql) {
  for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    params[_key2 - 1] = arguments[_key2];
  }

  return new Promise((resolve, reject) => {
    db.get(sql, params || [], function cb(err, row) {
      if (err) {
        reject(err);
      } else {
        resolve(row);
      }
    });
  });
}

function all(sql) {
  for (var _len3 = arguments.length, params = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    params[_key3 - 1] = arguments[_key3];
  }

  return new Promise((resolve, reject) => {
    db.all(sql, params || [], function cb(err, rows) {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
}

function each(sql) {
  for (var _len4 = arguments.length, params = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    params[_key4 - 1] = arguments[_key4];
  }

  const cb = params.pop();
  return new Promise(resolve => {
    db.each(sql, params, cb, resolve);
  });
}

function exec(sql) {
  return new Promise((resolve, reject) => {
    db.exec(sql, err => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

function prepare(sql) {
  for (var _len5 = arguments.length, params = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    params[_key5 - 1] = arguments[_key5];
  }

  return new Promise((resolve, reject) => {
    const statement = db.prepare(sql, ...params, err => {
      if (err) {
        reject(err);
      } else {
        resolve(statement);
      }
    });
  });
}

/* eslint-disable object-shorthand */
exports.default = { get: get, open, close, run, all, each, exec, prepare };
/* eslint-enable object-shorthand */